---
title: "Github Quarto"
author: "Ozayr Mohammed"
format: html
editor: visual
---

```{r}
#| include: false
#get repo names, limit can be set to Inf for all 
repo_results <- gh::gh(
  "GET /orgs/{org}/repos",
  org = "The-Strategy-Unit",
  .limit = Inf
)

#gets repo names and true/false if it's private
repos <- repo_results |> 
  purrr::map(\(x) tibble::tibble(
    repo_name = purrr::pluck(x, "name"),
    is_private = purrr::pluck(x, "private")
  )) |> 
  purrr::list_rbind()


#get org memeber usernames, limit can be set to Inf for all 
#names are regexed
org_members <- gh::gh(
  "GET /orgs/{org}/members",
  org = "The-Strategy-Unit",
  .limit = Inf
) |> 
  sapply(\(x) x[["login"]]) |>
  paste(collapse = "|")

#itterate through repo names 
#get codeowner file info if it exists
co_returned <- purrr::map_dfr(
  repos$repo_name, \(repo_name){
  
  result <- tryCatch({
    gh::gh(
      "GET /repos/{owner}/{repo}/contents/{path}",
      # https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#get-repository-content
      owner = "The-Strategy-Unit",
      repo = repo_name,  
      path = "CODEOWNERS"
    )
  },
  error = function(e) {
    return("No file found")
  })
  
  tibble::tibble(
    repo_name = repo_name, 
    co_file = list(result)
    
  )
  
})

# join repos and co_returned




#reads content of all codeowner urls
#returns table of all repo names, and respective codeowner files and owners if they exists


  


co_table <- repos |> 
  dplyr::left_join(co_returned) |> 
  dplyr::mutate(
    co_url = 
      purrr::map_chr(
        co_file, 
        "download_url",
        .default = "No file found"),
    
    co_content = 
      purrr::map(
        co_url,
        purrr::possibly(
          readLines,
          otherwise = "No file found"),
      ),
    
    codeowners_raw =
      purrr::map(
        co_content,
        \(x) stringr::str_extract_all(
          x,
          "(?<=@)(?!primary-owner|secondary-owner)[A-Za-z0-9-]+"
        ) |>
          unlist()
        
      ),
    
    codeowners_matched = 
      stringr::str_extract_all(
        codeowners_raw, 
        org_members),
  )

n_repos <- nrow(co_table)

n_with_codeowners_public <- co_table |> 
  dplyr::filter(is_private == FALSE &
                  co_url != "No file found") |> 
  nrow()

n_with_codeowners_private <- co_table |> 
  dplyr::filter(is_private == TRUE &
                  co_url != "No file found") |> 
  nrow()

codeowners_overview <- co_table |> 
  tidyr::unnest(codeowners_raw) |> 
  dplyr::group_by(codeowners_raw) |> 
  dplyr::summarise(count = dplyr::n()) |> 
  dplyr::rename("owner" = codeowners_raw)

```

There are `r n_repos` repositories in the Strategy Unit Organisation.\

Of these, `r n_with_codeowners_public` **public** repositories and `r n_with_codeowners_private` **private** repositories have a CODEOWNERS file.\
\
The following table is a count of users mentioned in the CODEOWNERS files of public repositories in the Strategy Unit Organisation.\
\

```{r}
#| echo: false
gt::gt(codeowners_overview |> 
         dplyr::arrange(
           stringr::str_to_lower(owner)
           )
)
```
